// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat_benchmarking

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FlatDelta struct {
	_tab flatbuffers.Table
}

func GetRootAsFlatDelta(buf []byte, offset flatbuffers.UOffsetT) *FlatDelta {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlatDelta{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FlatDelta) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlatDelta) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FlatDelta) SessionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatDelta) Type() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatDelta) MutateType(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *FlatDelta) Chips() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatDelta) MutateChips(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *FlatDelta) Tracking(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *FlatDelta) TrackingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatDelta) InstallOS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatDelta) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatDelta) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *FlatDelta) ClearTimeStamp() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FlatDelta) MutateClearTimeStamp(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *FlatDelta) IsTournament() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FlatDelta) MutateIsTournament(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func FlatDeltaStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func FlatDeltaAddSessionId(builder *flatbuffers.Builder, sessionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sessionId), 0)
}
func FlatDeltaAddType(builder *flatbuffers.Builder, type_ int32) {
	builder.PrependInt32Slot(1, type_, 0)
}
func FlatDeltaAddChips(builder *flatbuffers.Builder, chips int64) {
	builder.PrependInt64Slot(2, chips, 0)
}
func FlatDeltaAddTracking(builder *flatbuffers.Builder, tracking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(tracking), 0)
}
func FlatDeltaStartTrackingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FlatDeltaAddInstallOS(builder *flatbuffers.Builder, installOS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(installOS), 0)
}
func FlatDeltaAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(5, timestamp, 0)
}
func FlatDeltaAddClearTimeStamp(builder *flatbuffers.Builder, clearTimeStamp bool) {
	builder.PrependBoolSlot(6, clearTimeStamp, false)
}
func FlatDeltaAddIsTournament(builder *flatbuffers.Builder, isTournament bool) {
	builder.PrependBoolSlot(7, isTournament, false)
}
func FlatDeltaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
